package com.steffanbecker.pedidos.database.orm;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.steffanbecker.pedidos.database.orm.Itens;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ITENS.
*/
public class ItensDao extends AbstractDao<Itens, Long> {

    public static final String TABLENAME = "ITENS";

    /**
     * Properties of entity Itens.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Item_id = new Property(0, Long.class, "item_id", true, "ITEM_ID");
        public final static Property Item_category_id = new Property(1, Long.class, "item_category_id", false, "ITEM_CATEGORY_ID");
        public final static Property Item_name = new Property(2, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Item_value = new Property(3, double.class, "item_value", false, "ITEM_VALUE");
        public final static Property Item_image = new Property(4, String.class, "item_image", false, "ITEM_IMAGE");
    };

    private DaoSession daoSession;


    public ItensDao(DaoConfig config) {
        super(config);
    }
    
    public ItensDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ITENS' (" + //
                "'ITEM_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: item_id
                "'ITEM_CATEGORY_ID' INTEGER," + // 1: item_category_id
                "'ITEM_NAME' TEXT NOT NULL ," + // 2: item_name
                "'ITEM_VALUE' REAL NOT NULL ," + // 3: item_value
                "'ITEM_IMAGE' TEXT);"); // 4: item_image
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ITENS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Itens entity) {
        stmt.clearBindings();
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(1, item_id);
        }
 
        Long item_category_id = entity.getItem_category_id();
        if (item_category_id != null) {
            stmt.bindLong(2, item_category_id);
        }
        stmt.bindString(3, entity.getItem_name());
        stmt.bindDouble(4, entity.getItem_value());
 
        String item_image = entity.getItem_image();
        if (item_image != null) {
            stmt.bindString(5, item_image);
        }
    }

    @Override
    protected void attachEntity(Itens entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Itens readEntity(Cursor cursor, int offset) {
        Itens entity = new Itens( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // item_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // item_category_id
            cursor.getString(offset + 2), // item_name
            cursor.getDouble(offset + 3), // item_value
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // item_image
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Itens entity, int offset) {
        entity.setItem_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_category_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setItem_name(cursor.getString(offset + 2));
        entity.setItem_value(cursor.getDouble(offset + 3));
        entity.setItem_image(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Itens entity, long rowId) {
        entity.setItem_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Itens entity) {
        if(entity != null) {
            return entity.getItem_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoriesDao().getAllColumns());
            builder.append(" FROM ITENS T");
            builder.append(" LEFT JOIN CATEGORIES T0 ON T.'ITEM_CATEGORY_ID'=T0.'CATEGORY_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Itens loadCurrentDeep(Cursor cursor, boolean lock) {
        Itens entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Categories categories = loadCurrentOther(daoSession.getCategoriesDao(), cursor, offset);
        entity.setCategories(categories);

        return entity;    
    }

    public Itens loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Itens> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Itens> list = new ArrayList<Itens>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Itens> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Itens> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
