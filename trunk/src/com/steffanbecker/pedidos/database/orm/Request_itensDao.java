package com.steffanbecker.pedidos.database.orm;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.steffanbecker.pedidos.database.orm.Request_itens;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REQUEST_ITENS.
*/
public class Request_itensDao extends AbstractDao<Request_itens, Void> {

    public static final String TABLENAME = "REQUEST_ITENS";

    /**
     * Properties of entity Request_itens.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Item_id = new Property(0, long.class, "item_id", false, "ITEM_ID");
        public final static Property Request_id = new Property(1, long.class, "request_id", false, "REQUEST_ID");
        public final static Property Item_price = new Property(2, double.class, "item_price", false, "ITEM_PRICE");
        public final static Property Item_quantity = new Property(3, int.class, "item_quantity", false, "ITEM_QUANTITY");
    };

    private Query<Request_itens> itens_For_item_idQuery;
    private Query<Request_itens> requests_For_request_idQuery;

    public Request_itensDao(DaoConfig config) {
        super(config);
    }
    
    public Request_itensDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REQUEST_ITENS' (" + //
                "'ITEM_ID' INTEGER NOT NULL ," + // 0: item_id
                "'REQUEST_ID' INTEGER NOT NULL ," + // 1: request_id
                "'ITEM_PRICE' REAL NOT NULL ," + // 2: item_price
                "'ITEM_QUANTITY' INTEGER NOT NULL );"); // 3: item_quantity
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REQUEST_ITENS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Request_itens entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getItem_id());
        stmt.bindLong(2, entity.getRequest_id());
        stmt.bindDouble(3, entity.getItem_price());
        stmt.bindLong(4, entity.getItem_quantity());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Request_itens readEntity(Cursor cursor, int offset) {
        Request_itens entity = new Request_itens( //
            cursor.getLong(offset + 0), // item_id
            cursor.getLong(offset + 1), // request_id
            cursor.getDouble(offset + 2), // item_price
            cursor.getInt(offset + 3) // item_quantity
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Request_itens entity, int offset) {
        entity.setItem_id(cursor.getLong(offset + 0));
        entity.setRequest_id(cursor.getLong(offset + 1));
        entity.setItem_price(cursor.getDouble(offset + 2));
        entity.setItem_quantity(cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Request_itens entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Request_itens entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "for_item_id" to-many relationship of Itens. */
    public synchronized List<Request_itens> _queryItens_For_item_id(long item_id) {
        if (itens_For_item_idQuery == null) {
            QueryBuilder<Request_itens> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Item_id.eq(item_id));
            itens_For_item_idQuery = queryBuilder.build();
        } else {
            itens_For_item_idQuery.setParameter(0, item_id);
        }
        return itens_For_item_idQuery.list();
    }

    /** Internal query to resolve the "for_request_id" to-many relationship of Requests. */
    public synchronized List<Request_itens> _queryRequests_For_request_id(long request_id) {
        if (requests_For_request_idQuery == null) {
            QueryBuilder<Request_itens> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Request_id.eq(request_id));
            requests_For_request_idQuery = queryBuilder.build();
        } else {
            requests_For_request_idQuery.setParameter(0, request_id);
        }
        return requests_For_request_idQuery.list();
    }

}
