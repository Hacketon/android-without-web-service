package com.steffanbecker.pedidos.database.orm;

import java.util.List;
import com.steffanbecker.pedidos.database.orm.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table REQUESTS.
 */
public class Requests {

    private Long request_id;
    private int request_table_number;
    /** Not-null value. */
    private String request_finalized;
    private double request_total_value;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RequestsDao myDao;

    private List<Request_itens> for_request_id;

    public Requests() {
    }

    public Requests(Long request_id) {
        this.request_id = request_id;
    }

    public Requests(Long request_id, int request_table_number, String request_finalized, double request_total_value) {
        this.request_id = request_id;
        this.request_table_number = request_table_number;
        this.request_finalized = request_finalized;
        this.request_total_value = request_total_value;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRequestsDao() : null;
    }

    public Long getRequest_id() {
        return request_id;
    }

    public void setRequest_id(Long request_id) {
        this.request_id = request_id;
    }

    public int getRequest_table_number() {
        return request_table_number;
    }

    public void setRequest_table_number(int request_table_number) {
        this.request_table_number = request_table_number;
    }

    /** Not-null value. */
    public String getRequest_finalized() {
        return request_finalized;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRequest_finalized(String request_finalized) {
        this.request_finalized = request_finalized;
    }

    public double getRequest_total_value() {
        return request_total_value;
    }

    public void setRequest_total_value(double request_total_value) {
        this.request_total_value = request_total_value;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Request_itens> getFor_request_id() {
        if (for_request_id == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Request_itensDao targetDao = daoSession.getRequest_itensDao();
            for_request_id = targetDao._queryRequests_For_request_id(request_id);
        }
        return for_request_id;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFor_request_id() {
        for_request_id = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
