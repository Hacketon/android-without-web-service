package com.steffanbecker.pedidos.database.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.steffanbecker.pedidos.database.orm.Requests;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REQUESTS.
*/
public class RequestsDao extends AbstractDao<Requests, Long> {

    public static final String TABLENAME = "REQUESTS";

    /**
     * Properties of entity Requests.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Request_id = new Property(0, Long.class, "request_id", true, "REQUEST_ID");
        public final static Property Request_table_number = new Property(1, int.class, "request_table_number", false, "REQUEST_TABLE_NUMBER");
        public final static Property Request_finalized = new Property(2, String.class, "request_finalized", false, "REQUEST_FINALIZED");
        public final static Property Request_total_value = new Property(3, double.class, "request_total_value", false, "REQUEST_TOTAL_VALUE");
    };

    private DaoSession daoSession;


    public RequestsDao(DaoConfig config) {
        super(config);
    }
    
    public RequestsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REQUESTS' (" + //
                "'REQUEST_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: request_id
                "'REQUEST_TABLE_NUMBER' INTEGER NOT NULL ," + // 1: request_table_number
                "'REQUEST_FINALIZED' TEXT NOT NULL ," + // 2: request_finalized
                "'REQUEST_TOTAL_VALUE' REAL NOT NULL );"); // 3: request_total_value
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REQUESTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Requests entity) {
        stmt.clearBindings();
 
        Long request_id = entity.getRequest_id();
        if (request_id != null) {
            stmt.bindLong(1, request_id);
        }
        stmt.bindLong(2, entity.getRequest_table_number());
        stmt.bindString(3, entity.getRequest_finalized());
        stmt.bindDouble(4, entity.getRequest_total_value());
    }

    @Override
    protected void attachEntity(Requests entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Requests readEntity(Cursor cursor, int offset) {
        Requests entity = new Requests( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // request_id
            cursor.getInt(offset + 1), // request_table_number
            cursor.getString(offset + 2), // request_finalized
            cursor.getDouble(offset + 3) // request_total_value
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Requests entity, int offset) {
        entity.setRequest_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRequest_table_number(cursor.getInt(offset + 1));
        entity.setRequest_finalized(cursor.getString(offset + 2));
        entity.setRequest_total_value(cursor.getDouble(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Requests entity, long rowId) {
        entity.setRequest_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Requests entity) {
        if(entity != null) {
            return entity.getRequest_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
